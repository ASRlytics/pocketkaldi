// 2016-12-16

#include <assert.h>
#include <stdio.h>
#include <string.h>
#include <math.h>
#include "srfft.h"

#define FRAME_SIZE 128

using pocketkaldi::SRFFT;

float fft_data[FRAME_SIZE] = {
  64.327972f,
  5.358913f,
  0.791767f,
  1.920914f,
  -3.840443f,
  0.428152f,
  4.318027f,
  5.042324f,
  -2.878839f,
  -1.504092f,
  -4.267399f,
  -2.452022f,
  2.500228f,
  -0.003854f,
  3.037745f,
  6.232413f,
  0.861772f,
  1.077237f,
  -2.747081f,
  2.078628f,
  -4.827455f,
  0.668961f,
  0.362430f,
  -1.587465f,
  1.249400f,
  -2.236670f,
  -5.381606f,
  -0.534615f,
  0.041566f,
  -2.730332f,
  -2.380771f,
  -0.534598f,
  0.560080f,
  0.160841f,
  -2.492077f,
  2.106327f,
  0.000733f,
  -3.182398f,
  0.852457f,
  0.942563f,
  0.364373f,
  -1.059383f,
  -1.814649f,
  -3.777065f,
  1.380510f,
  1.529621f,
  0.692086f,
  -1.651362f,
  3.373775f,
  -0.711792f,
  -0.267135f,
  -0.871733f,
  -1.211143f,
  -5.234981f,
  -0.945150f,
  2.188042f,
  0.400236f,
  -0.943500f,
  -0.551169f,
  3.125078f,
  -0.051639f,
  0.123859f,
  2.722306f,
  -3.469395f,
  -0.423284f,
  3.546020f,
  0.939063f,
  0.927846f,
  -2.142638f,
  2.819347f,
  -4.940828f,
  2.220718f,
  1.444046f,
  2.961967f,
  -4.208596f,
  -3.503080f,
  -2.000907f,
  -2.764666f,
  -0.636293f,
  0.464584f,
  -1.053023f,
  -0.652878f,
  1.587754f,
  -1.310850f,
  -0.884020f,
  1.288747f,
  2.219922f,
  3.430676f,
  -1.995277f,
  -1.537289f,
  -0.921564f,
  2.712396f,
  2.251916f,
  -0.166370f,
  1.454337f,
  0.588095f,
  -4.317734f,
  -0.327093f,
  -2.968243f,
  -4.039614f,
  -1.555538f,
  1.243132f,
  -4.228585f,
  -0.054627f,
  2.771200f,
  0.059180f,
  1.751834f,
  -1.943009f,
  -1.496475f,
  1.216634f,
  -0.586533f,
  -0.646510f,
  1.724987f,
  0.892431f,
  0.837464f,
  1.286601f,
  3.203461f,
  -0.692924f,
  -4.335427f,
  -1.425334f,
  0.119723f,
  3.729227f,
  3.040815f,
  3.217317f,
  1.240916f,
  0.252009f,
  4.629579f,
  0.161234f
};

float data[FRAME_SIZE] = {
  0.237788f, 
  0.291066f, 
  0.845814f, 
  0.152208f, 
  0.585537f, 
  0.193475f, 
  0.810623f, 
  0.173531f, 
  0.484983f, 
  0.151863f, 
  0.366957f, 
  0.491736f, 
  0.910094f, 
  0.265257f, 
  0.893188f, 
  0.220351f, 
  0.631798f, 
  0.571077f, 
  0.332158f, 
  0.104455f, 
  0.502931f, 
  0.567394f, 
  0.854165f, 
  0.0401409f, 
  0.108022f, 
  0.639396f, 
  0.013111f, 
  0.720184f, 
  0.101814f, 
  0.482945f, 
  0.254355f, 
  0.676697f, 
  0.896782f, 
  0.759896f, 
  0.720292f, 
  0.907623f, 
  0.928611f, 
  0.377663f, 
  0.899756f, 
  0.77888f, 
  0.324255f, 
  0.194231f, 
  0.995553f, 
  0.161296f, 
  0.708034f, 
  0.501519f, 
  0.936301f, 
  0.716323f, 
  0.10519f, 
  0.209205f, 
  0.559397f, 
  0.705432f, 
  0.0782337f, 
  0.51053f, 
  0.196197f, 
  0.274211f, 
  0.638602f, 
  0.448208f, 
  0.0398718f, 
  0.467251f, 
  0.0777565f, 
  0.0381004f, 
  0.160044f, 
  0.397832f, 
  0.688898f, 
  0.534712f, 
  0.68692f, 
  0.272457f, 
  0.465933f, 
  0.276555f, 
  0.450086f, 
  0.935069f, 
  0.0869318f, 
  0.453889f, 
  0.945625f, 
  0.855719f, 
  0.120976f, 
  0.0141639f, 
  0.234515f, 
  0.866313f, 
  0.43739f, 
  0.769548f, 
  0.874003f, 
  0.376934f, 
  0.944328f, 
  0.798493f, 
  0.838634f, 
  0.946656f, 
  0.586052f, 
  0.599163f, 
  0.319347f, 
  0.421162f, 
  0.904107f, 
  0.158462f, 
  0.835159f, 
  0.731942f, 
  0.491837f, 
  0.212129f, 
  0.119752f, 
  0.0483631f, 
  0.426026f, 
  0.325782f, 
  0.104662f, 
  0.428916f, 
  0.623148f, 
  0.6187f, 
  0.779997f, 
  0.488031f, 
  0.98955f, 
  0.925851f, 
  0.642174f, 
  0.747365f, 
  0.956569f, 
  0.515966f, 
  0.221398f, 
  0.299632f, 
  0.810162f, 
  0.00635903f, 
  0.28057f, 
  0.919172f, 
  0.36738f, 
  0.407252f, 
  0.874503f, 
  0.95226f, 
  0.99036f, 
  0.150404f, 
  0.548236f, 
  0.237134f
};

int main() {
  SRFFT srfft(FRAME_SIZE);

  float buffer[FRAME_SIZE], x[FRAME_SIZE];
  memcpy(x, data, FRAME_SIZE * sizeof(float));

  int data_size = sizeof(data) / sizeof(float);
  int buffer_size = sizeof(buffer) / sizeof(float);
  srfft.Compute(x, FRAME_SIZE, true, buffer, FRAME_SIZE);
  for (int i = 0; i < data_size; ++i) {
    assert(fabs(x[i] - fft_data[i]) < 1e-4);
  }
  return 0;
}
